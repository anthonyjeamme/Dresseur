import { TPosition } from "../../Types/Math/Position"
import { Tile } from "../Tile/Tile"

export class Scene {
  map = null
  tiles = null

  constructor() {
    this.tiles = [
      new Tile("/res/tiles/ground/ground.png", {
        grass: {
          coords: [0, 0, 32, 32],
        },
        water: {
          coords: [32 * 4, 0, 32, 32],
        },
        grassWaterleft: {
          coords: [0, 32, 32, 32],
        },
        ground: {
          coords: [32, 0, 32, 32],
        },
      }),
    ]

    this.tiles[0].load()

    const W = {
      tile: this.tiles[0],
      id: "water",
    }

    const G = {
      tile: this.tiles[0],
      id: "grass",
    }

    const GW = {
      tile: this.tiles[0],
      id: "grassWaterleft",
    }

    this.map = [
      [
        W,
        W,
        GW,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
      ],
      [
        W,
        W,
        GW,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
      ],
      [
        W,
        W,
        GW,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
      ],
      [
        W,
        W,
        GW,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
      ],
      [
        W,
        W,
        GW,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
      ],
      [
        W,
        W,
        GW,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
      ],
      [
        W,
        W,
        GW,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
      ],
      [
        W,
        W,
        GW,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
      ],
      [
        W,
        W,
        GW,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
      ],
      [
        W,
        W,
        GW,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
      ],
      [
        W,
        W,
        GW,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
      ],
      [
        W,
        W,
        GW,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
      ],
      [
        W,
        W,
        GW,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
      ],
      [
        W,
        W,
        GW,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
      ],
      [
        W,
        W,
        GW,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
      ],
      [
        W,
        W,
        GW,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
        G,
      ],
    ]
  }

  getCell(position: TPosition) {
    return this.map[position.y]?.[position.x]
  }
}
